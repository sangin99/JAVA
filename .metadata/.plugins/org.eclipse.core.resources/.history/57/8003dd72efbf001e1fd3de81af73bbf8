package myFirstProrject;

import java.util.Arrays;

//문제 설명
//
//정수 리스트 numList가 주어질 때, 첫 번째로 나오는 음수의 인덱스를 return하도록 solution 메서드를 완성해주세요. 음수가 없다면 -1을 return한다.
//메서드의 반환 타입은 정수 타입이고 메서드명은 solution, 매개변수의 타입은 정수의 배열로 받으면서 접근 제어는 모든 패키지에서 사용할 수 있도록 하며 오버라이딩이 가능하고 구현부가 존재하는 인스턴스 메서드로 작성하시오.
// 
//
//제한사항
//
//5 ≤ numList의 길이 ≤ 100
//-10 ≤ numList의 원소 ≤ 100 
//
//입출력 예
//
// 
//
//[12, 4, 15, 46, 38, -2, 15] → 5
//[13, 22, 53, 24, 15, 6] → -1

//		 
//		public class Solution {
//		    public int solution(int[] numList) {
//		        for (int i = 0; i < numList.length; i++) {
//		            if (numList[i] < 0) {
//		                return i; 
//		            }
//		        }
//		        return -1; 
// ========================================================================		
//		        public class Solution {
//		            public static void main(String[] args) {
//		                int[] numList = {1, 2, 3, -4, 5};
//		                int result = new Solution().solution(numList);
//		                System.out.println(result); 
//		            }
//		            protected int solution(int[] numList) {
//		                if (numList.length < 5 || numList.length > 100) {	
//		                }
//		                for (int i = 0; i < numList.length; i++) {
//		                    if (numList[i] < -10 || numList[i] > 100) {		                        
//		                    }
//		                    if (numList[i] < 0) {
//		                        return i; 
//		                    }
//		                }
//		                return -1;
//====================================================================================		              
//		                
//		                import java.util.Scanner;
//
//		                public class Solution {
//		                    public static void main(String[] args) {
//		                        Scanner scanner = new Scanner(System.in);
//
//		                        System.out.println();
//		                        test(scanner, new int[]{12, 4, 15, 46, 38, -2, 15});
//		                        System.out.println();
//		                        test(scanner, new int[]{13, 22, 53, 24, 15, 6});
//		                    }
//
//		                    private static void test(Scanner scanner, int[] testCase) {
//		                        System.out.print(Arrays.toString(testCase));
//		                        try {
//		                            int result = new Solution().solution(testCase);
//		                            System.out.print(" → " + result);
//		                        } catch (IllegalArgumentException x) {
//		                            
//		                        }
//		                    }
//
//		                    protected int solution(int[] numList) {
//		                        if (numList.length < 5 || numList.length > 100) {
//		                           
//		                        }
//
//		                        for (int i = 0; i < numList.length; i++) {
//		                            if (numList[i] < -10 || numList[i] > 100) {
//		                             
//		                            }
//
//		                            if (numList[i] < 0) {
//		                                return i; 
//		                            }
//		                        }
//		                        return -1; 
//		                    }
//		             
//
//		              
//		            }
//
//import java.util.Arrays;
//
//public class Solution {
//    public static void main(String[] args) {
//        int[] array = {1, 2, 3, 4, 5};
//        int[][] queries = {{1, 3}, {2, 4}, {0, 2}};
//
//        int[] result = new Solution().solution(array, queries);
//        System.out.println(Arrays.toString(result));
//    }
//
//    protected int[] solution(int[] array, int[][] queries) {
//        if (array.length < 1 || array.length > 1000) {
//            throw new IllegalArgumentException("array의 길이는 1 이상 1000 이하이어야 합니다.");
//        }
//
//        for (int i = 0; i < array.length; i++) {
//            if (array[i] < 0 || array[i] > 1000000) {
//                throw new IllegalArgumentException("array의 원소는 0 이상 1000000 이하이어야 합니다.");
//            }
//        }
//
//        if (queries.length < 1 || queries.length > 1000) {
//            throw new IllegalArgumentException("queries의 길이는 1 이상 1000 이하이어야 합니다.");
//        }
//
//        for (int[] query : queries) {
//            if (query.length != 2 || query[0] < 0 || query[1] < query[0] || query[1] >= array.length) {
//                throw new IllegalArgumentException("각 query는 [s, e] 형태여야 하며, 0 ≤ s ≤ e < array의 길이를 만족해야 합니다.");
//            }
//        }
//
//        for (int[] query : queries) {
//            int start = query[0];
//            int end = query[1];
//
//            for (int i = start; i <= end; i++) {
//                array[i] += 1;
//            }
//        }
//
//        return array;
//    }
//}

class Solution {
    public int[] solution(int[] array, int[][] queries) {
        
        for(int i = 0; i < queries.length; i++){
            for(int j = queries[i][0]; j <= queries[i][1]; j++){
                array[j]++;
            }
        }
        
        return array;
    }
}

