package ch02;

//**다형성 : 하나의 표현이 여러가지 형태로 나타낼 수 있는 것

// 오버로드 : 같은 클래스 내에서 동일한 메서들의 이름으로 여러개의 메서드를 정의할 수 있도록 하는 것
// 오버라이드 : 자손 클래스에서 조상 클래스에 정의된 메서드를 재정의 하는 것

class Human1 {
	String name;
	int age;
}

class Developer1 extends Human1{
	String position;
}

class FootballPlayer1 extends Human1 implements FootballPlay {
	int goal;

	@Override
	public void kick() {
		
	}
}

interface FootballPlay {
	public abstract void kick ();
}
public class H_Polymorphism {

	public static void main(String[] args) {
		
		Human1 human1 = new Human1();
		Developer1 developer1 = new Developer1();
		FootballPlayer1 footballplayer1 = new FootballPlayer1();
		
		// 업캐스팅 : 하위 클래스의 객체를 상위 클래스의 참조변수에 담을 수 있도록 변환하는 것
		//			인터페이스 구현 클래스를 구현한 인터페이스의 타입 참조변수로 담을 수 있도록 하는 것
		Human1 human2 = new Developer1();
		Human1 human3 = new FootballPlayer1();
		
		FootballPlay football = new FootballPlayer1();
		
		// human2.position = "";
	
		// 다운캐스팅 : 업캐스팅된 객체를 다시 원래의 타입의 참조변수에 담을 수 있도록 변환하는 것
		Developer1 developer2 = (Developer1) human2;  // () : 강제로 명시적으로 지정을 한다.
		developer2.position = "";
//여기까지가 갤러리-사진에 내용
		
		FootballPlayer1 footballplayer = new FootballPlayer1();
		footballplayer.name = "홍길동";
		footballplayer.age = 30;
		footballplayer.goal = 55;
		
		System.out.println(footballplayer.name);
		System.out.println(footballplayer.age);
		System.out.println(footballplayer.goal);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}	

}
