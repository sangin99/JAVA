package ch03;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public class B_Package {

	public static void main(String[] args) {
		
		// Wrapper 클래스 : 기본형 데이터 타입을 참조형 데이터 타입으로 다룰 수 있도록 하는 클래스
		// 일반적으로 기본형 데이터타입의 풀네임에 첫글자를 대문자로 지정하면 Wrapper 클래스가 됨
		Integer wrapperInt = 0;
		Double wrapperDouble = 10.0;
		Boolean wrapperBoolean = false;
		String wrapperString = "Sring";
	
		// 자주 사용하는 기능
		// parse 메서드 : 문자열을 특정 타입으로 변환
		int number = Integer.parseInt("123");
		// toString 메서드 : 특정 타입의 값을 문자열로 변환
		String string = Integer.toString(123);   // ★시★험★?★
		
		
		// Collection Framework : java 에서 데이터 구조에 대한 표준화된 기법을 제공
		
		
		// List : 데이터를 저장할 때 중복을 허용하고 순서가 존재 --  index 로 접근할 수 있다
		List<Integer> arrayList;  // <> : 어떤 타입의 List 인지 표시, 반드시 정수!  = int[] arrayList;
		//  ★ ArrayList : List 중에서 내부 배열을 사용하여 인덱스를 사용한 검색이 빠름
		arrayList = new ArrayList<>();
		// 	  LinkedList : 이중 연결 기법을 사용하여 추가, 삭제가 빠름
//		 arrayList = new LinkedList<>();
		
		// add() : List 에 요소를 추가
		// 추가하 요소의 데이터 타입은 반드시 제너리긍로 지정한 타입으로만 지정 가능
		arrayList.add(10);   // {} : 배열의 길이 변화 
//		arrayList.add("aaaa");   -- List<Integer> -> List<Object>로 변경하면 가능 but! 42번줄에 컴파일오류가 뜰것이다. // ※Object 쓰지마라!
		System.out.println(arrayList);
		
		// get() : List 의 특정 인덱스 요소에 접근
		int arrayElement = arrayList.get(0);   // (Integer) 강제형변환해서 사용가능
		System.out.println(arrayElement);
		//※주의 사항
		// List 인덱스 범위를 초과하는 인덱스를 지정할 수 없음
		// 기본형 데이터타입의 변수로 반환값을 받을 경우 null 값을 받을 수 있음을 주의
		
		// set() : List 의 특정 인덱스 요소를 변경
		// List 인덱스 범위를 초과하는 인덱스를 지정할 수 없음
		arrayList.set(0,50);
		System.out.println(arrayList);
		
		// remove() : List 의 특정 요소를 삭제
		arrayList.remove(0);
		System.out.println(arrayList);
		
		// size() : List 의 길이를 반환
		System.out.println(arrayList.size());
		
	}
	

}
